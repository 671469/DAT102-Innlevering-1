Oppgave 2

a) Hva er størrelsesorden uttrykt i O-notasjon

  i.  4𝑛^2 + 50𝑛 − 10
      4 * n^2 + 50 * n - 10  (Find the fastest growng term)
      4 * n^2  (take out the coefficient)
      n*2  
      Størrelsesorden uttrykt i O-notasjon er O(n^2).
     
 ii.  10𝑛 + 4 log_2 n + 30
      10 * n + 4log_2 * n + 30 (Find the fastest growing term)
      10 * n (take out the coefficient)
      n
      Størrelsesorden uttrykt i O-notasjon er O(n).
 
 iii. 13𝑛^3 + 22𝑛^2 + 50𝑛 + 20
      The fastest growing term is 13 * n^3
      Take out the coefficient: n^3
      Størrelsesorden uttrykt i O-notasjon er O(n^3).
      
 iv.  35 + 13log_2 n 
      The fastest growing term is 13*log_2n
      Take out the coefficient: log_2n
      Størrelsesorden uttrykt i O-notasjon er O(log n ).
      
b)  Vi ser av løkken utføres log_2 n ganger, så effiktiviteten uttrykt i stor O-notasjon blir logaritmisk O(log n).
        
c) Løkkes utføes n * 2n ganger, så effiktiviteten uttrykt i stor O-notasjon blir kvadratisk O(n^2).
     
d) areal =2pi*r^2
   I O-otasjon blir dette O(r^2)
   Omkrets = 2pi*r
   I stor O-notasjon blir dette O(r).
   
e) Vi ser at i verste tilfelle så må denne algoritmen utføres n^2 + n ganger, uttrykt i O-notasjon blir dette O(n^2)
    
f)  i.  𝑡_1(𝑛) = 8𝑛 + 4𝑛^3
        O-notasjon er O(n^3).
    ii. 𝑡_2(𝑛) = 10 log_2 𝑛 + 20
        O-notasjon er O(log n).
   iii. 𝑡_3(𝑛) = 20𝑛 + 2𝑛 log_2 𝑛 + 11
        O-notasjonen er O(n log n).
    iv. 𝑡_4(𝑛) = 4 log_2 𝑛 + 2n
        O-notasjonen er O(n).
        
    Rangert fra hvor effektiv de er (best til verst):
    ii., iv., iii., i.
    
g) tid()-metoden er T(n) = cn, der c er en konstant. Begrunnelse:
   f(n) = O(g(n)) if c and some initial value k are positive when f(n) <= c * g(n) for all n > k is true.
   
